#include <TXLib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>

enum roots
{
    NO_ROOTS,
    ONE_ROOT,
    TWO_ROOTS,
    INF_ROOTS
};

const double EPSILON = 1e-10;

int SolveLinear(double b, double c, double* x1);
int SolveSquare(double a, double b, double c, double* x1, double* x2);
int Dispatcher(double a, double b, double c, double *x1, double *x2);
int Input(double* a, double* b, double* c);
void Output(int nRoots, double x1, double x2);
void CorrectInput();
bool iszero(double eps);
int CodeTester(double a, double b, double c, double nRoots, double x1, double x2, );

//-----------------------------------------------------------------------

int main()
{

    double a = 0;
    double b = 0;
    double c = 0;
    double x1 = 0;
    double x2 = 0;

    Input(&a, &b, &c);
    int nRoots = Dispatcher(a, b, c, &x1, &x2);
    Output(nRoots, x1, x2);

    return 0;
}

//-----------------------------------------------------------------------

int Input(double* a, double* b, double* c)
{
    assert(isfinite(a));
    assert(isfinite(b));
    assert(isfinite(c));

    printf("#######################\n"
           "#####     ######     ##\n"
           "####  #########  ######\n"
           "#####    #######    ###\n"
           "#######  #########  ###\n"
           "###     ######     ####\n"
           "#######################\n\n");

    printf("SQUARE EQUATION SOLVER (V1) \nDolgopa City, 2024 \n\n");
    printf("All rights reserved.\n \n");
    printf("Enter coefficients for ax^2+bx+c=0 equation ");
    printf("in the following format: a b c \n \n");

    while(scanf("%lg %lg %lg", a, b, c) != 3)
    {
        CorrectInput();
        printf("Wrong format of input, try again, i believe in you.\n");

    }

    return 0;
}

//-----------------------------------------------------------------------

int Dispatcher(double a, double b, double c, double *x1, double *x2)
{
    assert(x1 != x2);
    assert(x2 != NULL);
    assert(x1 != NULL);
    assert(isfinite(a));
    assert(isfinite(b));
    assert(isfinite(c));

    if (iszero(a))
    {
        printf("Your equation is linear (b*x + c = 0).\n");
        return SolveLinear(b, c, x1);
    }
    else
    {
        printf("Your equation is square (a*x^2 + b*x + c = 0).\n");
        return SolveSquare(a, b, c, x1, x2);
    }
}

//-----------------------------------------------------------------------

int SolveLinear(double b, double c, double* x1)
{
    assert(x1 != NULL);
    assert(isfinite(b));
    assert(isfinite(c));

    if (iszero(b))
    {
        if (iszero(c))
        {
            return INF_ROOTS;
        }
        else
        {
            return NO_ROOTS;
        }
    }
    else
    {
        *x1 = -c / b;
        return ONE_ROOT;
    }

}

//-----------------------------------------------------------------------

int SolveSquare(double a, double b, double c, double* x1, double* x2)
{
    assert(x1 != x2);
    assert(x2 != NULL);
    assert(x1 != NULL);
    assert(isfinite(a));
    assert(isfinite(b));
    assert(isfinite(c));

    double Discriminant = b * b - 4 * a * c;

    if (Discriminant < -EPSILON)
    {
        return NO_ROOTS;
    }
    else
    {
        *x1 = (-b - sqrt(Discriminant)) / (2 * a);
        *x2 = (-b + sqrt(Discriminant)) / (2 * a);

        if (iszero(Discriminant) == 1)
        {
            return ONE_ROOT;
        }
        else
        {
            return TWO_ROOTS;
        }
    }
}

//-----------------------------------------------------------------------

void Output(int nRoots, double x1, double x2)
{
    assert(isfinite(x1));
    assert(isfinite(x2));

    printf("\nProgram answer: \n\n");

    switch (nRoots)
        {
            case NO_ROOTS: printf("There is no real roots :(");
                           break;

            case ONE_ROOT: printf("The only root is %lg.", x1);
                           break;

            case TWO_ROOTS: printf("Roots are %lg and %lg.", x1, x2);
                            break;

            case INF_ROOTS: printf("Any root.");
                            break;

            default: printf("Error");
                     break;
        }
}

//-----------------------------------------------------------------------

bool iszero(double eps)
{
    return (fabs(eps) <= EPSILON);
}

//-----------------------------------------------------------------------

void CleanBuffer()
{

//-----------------------------------------------------------------------

int UnitTester ()
    while (getchar() != '\n') {}
}
